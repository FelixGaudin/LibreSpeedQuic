# config file inspired by https://github.com/yurymuski/nginx-http3/blob/master/example.nginx.conf

events {
    worker_connections  1024;
}

http {
    include         /etc/nginx/mime.types;
    include         /etc/nginx/conf.d/*.conf;

    # Allow upload speedtest
    # https://stackoverflow.com/questions/26717013/how-to-edit-nginx-conf-to-increase-file-size-upload
    client_max_body_size 1000m;

    # redirect http => https
    server {
        listen 80;
        server_name librespeedquic.chickenkiller.com;

        # Add Alt-Svc header to negotiate HTTP/3.
        add_header alt-svc 'h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443"; ma=86400';

        return 301 https://librespeedquic.chickenkiller.com$request_uri;
    }

    server {
        # https://github.com/cloudflare/quiche/tree/master/extras/nginx
        # Enable QUIC and HTTP/3.
        listen 443 quic reuseport;

        # Enable HTTP/2 (optional).
        listen 443 ssl http2;

        server_name librespeedquic.chickenkiller.com;

        ssl_certificate      fullchain.pem;
        ssl_certificate_key  privkey.pem;

        # Enable all TLS versions (TLSv1.3 is required for QUIC).
        ssl_protocols TLSv1.3;

        ssl_early_data on;

        if ($host != "librespeedquic.chickenkiller.com") {
                return 404;
        }

        # Add Alt-Svc header to negotiate HTTP/3.
        add_header alt-svc 'h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400, h3=":443"; ma=86400';

        # Here you can put the absolute path to the frontend folder
        # location / {
        #     root /data/www;
        # }

        location /dashboard {
            root html; # make the same path as for the root path
            index dashboard.html;
        }

        # Backend
        location /empty {
            proxy_pass http://localhost:8888/empty;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /getIP {
            proxy_pass http://localhost:8888/getIP;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /garbage {
            proxy_pass http://localhost:8888/garbage;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /telemetry {
            proxy_pass http://localhost:8888/telemetry;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /getdb {
            proxy_pass http://localhost:8888/getdb;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # On backend to know the http version
        # https://stackoverflow.com/questions/64622373/nginx-get-http-version-of-request-in-location
        location /httpversion {
            return 200 "$server_protocol";
        }

        # May help you for certbot
        # location /empty {
        #     return 200 "msg";
        # }

        # David Goodenough
        error_page  405     = $uri;
    }
}